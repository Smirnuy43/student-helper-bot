import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from file_processor.parser import download_file, extract_text_from_file
from prompt_constructor.constructor import build_prompt
from gpt_engine.client import get_chatgpt_response

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.MARKDOWN)
dp = Dispatcher(storage=MemoryStorage())

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message(lambda m: m.text is not None)
async def handle_text(message: Message):
    try:
        task_text = message.text.strip()

        if len(task_text) < 10:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
            return

        prompt = build_prompt(task_text, language="Python")

        await message.answer("ü§ñ –î—É–º–∞—é –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º...")

        result = get_chatgpt_response(prompt)

        await message.answer(f"üì¶ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ä–µ—à–µ–Ω–∏–µ:\n\n```python\n{result}\n```")

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞.")
        logging.exception(e)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ===
@dp.message(lambda m: m.document is not None)
async def handle_document(message: Message):
    try:
        file_path = await download_file(bot, message.document)
        await message.answer(f"‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: `{file_path.name}`")

        text = extract_text_from_file(file_path)
        prompt = build_prompt(text, language="Python")

        await message.answer("ü§ñ –û–±—Ä–∞—â–∞—é—Å—å –∫ –ò–ò, –æ–∂–∏–¥–∞–π—Ç–µ...")

        result = get_chatgpt_response(prompt)
        await message.answer(f"üì¶ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:\n\n```python\n{result}\n```")

    except ValueError as e:
        await message.answer(f"‚ö†Ô∏è {e}")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏.")
        logging.exception(e)


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())